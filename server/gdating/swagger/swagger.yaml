# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: gDating API
  description: An API designed for the Galvanize classroom
  version: "1.0.0"
# the domain of the service
host: galvanize-student-apis.herokuapp.com
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /gdating
produces:
  - application/json
paths:
  /members:
    get:
      summary: All Members
      description: |
        The Members GET endpoint returns information about every member resource in the database. These resources are randomly generated and include an identifying **_id**. Under the **_matches** field, those members with whom the given member has identified as a match are shown.
      parameters:
        - name: limit
          in: query
          description: Limits the query results.
          required: false
          type: number
        - name: offset
          in: query
          description: Offsets the query results.
          required: false
          type: number
      tags:
        - Members
      responses:
        200:
          description: An array of members
          schema:
            type: array
            items:
              $ref: '#/definitions/Member'
    post:
      summary: Create a Member
      description: |
        The Members POST endpoint allows for the creation of a new member resource. The post body must contain the information formatted in the same structure as it is received from the GET request.
      tags:
        - Members
      responses:
        201:
          description: Successfully created.
          schema:
            $ref: '#/definitions/Member'
        422:
          description: Error in creating Member.
          schema:
            $ref: '#/definitions/Error'
  /members/:id:
    get:
      summary: Retrieve a single Member
      description: |
        The Members GET endpoint with an ID returns information about a single member resource in the database.
      responses:
        200:
          description: A single member
          schema:
            type: object
            $ref: '#/definitions/Member'
        404:
          description: Member not found
          schema:
            type: object
            properties:
              errors:
                type: string
                description: A message of the problem.
    put:
      summary: Update a single Member
      description: |
        The Members PUT endpoint with an ID updates information about a single member. Information must be sent in the same structure retrieved from the GET, although not all information must be sent.
      responses:
        200:
          description: Update a Member
          schema:
            type: object
            $ref: '#/definitions/Member'
        422:
          description: Error in updating the Member.
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: Deactivates a single Member
      description: |
        The Members DELETE endpoint with an ID changes a field of active from true to false. The record is not actually removed from the database.
      responses:
        200:
          description: Deletes a Member
          schema:
            type: object
            $ref: '#/definitions/Member'
        422:
          description: Error in deleting the Member.
          schema:
            $ref: '#/definitions/Error'
  /members/:id:/conversations:
    get:
      summary: Retrieve all Conversations for a single Member
      description: |
        The /members/:id/conversations endpoint returns all conversation resources between the identifed member and all other members.
      responses:
        200:
          description: Returns all Conversations.
          schema:
            type: object
            $ref: '#/definitions/Conversation'
    post:
      summary: Update or create a Conversation between two Members.
      description: |
        The /members/:id/conversations POST endpoint will create a new conversation between two members if there isn't one already. If there is, it will simply update the existing conversation by adding a message object to the existing conversation. You need only send the parameters specified below.
      parameters:
        - name: _recipient
          in: formData
          description: The ID for the recipient of the message.
          required: true
          type: string
        - name: content
          in: formData
          description: The message contents
          required: true
          type: string
      responses:
        201:
          description: Created or updated a Conversation.
          schema:
            type: object
            $ref: '#/definitions/Conversation'
  /members/:id:/conversations/:recipientId:
    get:
      summary: Retrieve the Conversation between two members
      description: |
        The /members/:id/conversations/:recipientId endpoint returns the conversation between two members. The order of the member IDs does not matter.
      responses:
        200:
          description: Returns a single Conversation.
          schema:
            type: object
            $ref: '#/definitions/Conversation'
  /members/:id:/matches:
    get:
      summary: Get all Matches for a single Member
      description: |
        The /members/:id/matches endpoint returns an array of IDs where the IDs are those members whom the specified member has identified as a match.
      responses:
        200:
          description: Returns all Matches for a Member.
          schema:
            type: array
            items:
              type: object
              properties:
                _id:
                  type: string
                  description: A string represent of the Mongo ObjectId.
    post:
      summary: Creates a new Match for a single Member
      description: |
        The /members/:id/matches POST endpoint adds a member's ID to the specified member's match array.
      parameters:
        - name: _match
          in: formData
          description: The Match's ID
          required: true
          type: string
      responses:
        201:
          description: A Match was added.
          schema:
            type: object
            $ref: '#/definitions/Member'
  /members/:id:/matches/:matchId:
    delete:
      summary: Removes a Match for a single Member
      description: |
        The /members/:id/matches/:matchId DELETE endpoint removes the matchId's reference from the specified Member's match array.
      responses:
        200:
          description: A Match was removed.
          schema:
            type: object
            $ref: '#/definitions/Member'
definitions:
  Member:
    type: object
    properties:
      _id:
        type: string
        description: Unique and automatically generated identifier representing a specific member. Used as a database identifier.
      active:
        type: boolean
        description: A marker of whether the user is active or not. Automatically generated.
      username:
        type: string
        description: Unique and required identifier representing a specific member. Used as the display name on the website.
      names:
        type: object
        properties:
          firstName:
            type: string
            description: The member's first or preferred name.
          lastName:
            type: string
            description: The member's last or given name.
      avatar:
        type: string
        description: Image URL representing the member. Defaults to a random faker image url.
      email:
        type: string
        description: Unique identifier representing a specific member. Can be used for login identification purposes. Must be a valid email.
      password:
        type: string
        description: An encrypted password used to allow the user to login. Must be 8 characters or greater.
      dob:
        type: string
        format: date
        description: The member's birthday. Required and may be entered in "YYYY-MM-DD" format. The member must be older than 18 years old.
      phone:
        type: string
        description: A phone number for the member. Not validated.
      address:
        type: object
        properties:
          street:
            type: string
            description: The main street address.
          suite:
            type: string
            description: Identifying suite/apartment information.
          city:
            type: string
            description: The member's city.
          zipcode:
            type: string
            description: A five digit or more postal code.
          geo:
            type: object
            properties:
              lat:
                type: number
                format: float
                description: Required. A positive/negative value for locating the user.
              lng:
                type: number
                format: float
                description: Required. A positive/negative value for locating the user.
      website:
        type: string
        description: The member's website, if any.
      company:
        type: object
        properties:
          name:
            type: string
            description: The company's name.
          catchPhrase:
            type: string
            description: Flavor text about the company.
          bs:
            type: string
            description: Flavor text about the company.
      slug:
        type: string
        description: Unique and required identifier representing a specific member. To be used for the urls throughout the front end application.
      gender:
        type: number
        format: double
        description: A number representing the member's gender. There are four possible values -- 0, 1, 2, and 3. The default is 0.
      interestedIn:
        type: array
        items:
          type: number
          description: An array of numbers representing various genders (or whatever). Duplicate values are not allowed but some value is required.
      _matches:
        type: array
        items:
          type: object
          properties:
            _id:
              type: string
              description: A string represent of the Mongo ObjectId.
  Conversation:
    type: object
    properties:
      _id:
        type: string
        description: Unique and automatically generated identifier representing a specific member. Used as a database identifier.
      _members:
        type: array
        items:
          type: object
          properties:
            _id:
              type: string
              description: A string represent of the Mongo ObjectId.
      messages:
        type: array
        items:
          type: object
          properties:
            _sender:
              type: object
              properties:
                _id:
                  type: string
                  description: A string represent of the Mongo ObjectId.
            content:
              type: string
              description: The message contents.
            timestamp:
              type: string
              format: date
              description: The moment when the content was sent.
  Error:
    type: object
    properties:
      errors:
        type: object
        description: Errors will be an object with the key being the field name and the content being additional information about the error.
